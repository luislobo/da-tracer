<script type="text/javascript">
  io.sails.transports = ['websocket'];

  $(function () {
    console.log('app started')

    Vue.component('change-message', {
      props: ['message'],
      template: `
      <tr scope="row" class="change-message">
        <td class="col-md-1">{{message.localDate}}</td>
        <td class="col-md-1">{{message._id}}</td>
        <td class="col-md-1">{{message.db}}</td>
        <td class="col-md-1">{{message.collection}}</td>
        <td class="col-md-1">{{ message.operation }}</td>
        <td class="col-md-7"><pre v-highlightjs><code class="json">{{message.document}}</code></pre></td>
      </tr>`
    })

    Vue.directive('highlightjs', {
      deep: true,
      bind: function (el, binding) {
        // on first bind, highlight all targets
        let targets = el.querySelectorAll('code')
        targets.forEach((target) => {
          // if a value is directly assigned to the directive, use this
          // instead of the element content.
          if (binding.value) {
            target.textContent = binding.value
          }
          hljs.highlightBlock(target)
        })
      },
      componentUpdated: function (el, binding) {
        // after an update, re-fill the content and then highlight
        let targets = el.querySelectorAll('code')
        targets.forEach((target) => {
          if (binding.value) {
            target.textContent = binding.value
            hljs.highlightBlock(target)
          }
        })
      }
    })

    var app = new Vue({
      el: '#app',
      data: {
        messages: []
      },
      methods: {
        closeConnection: function (event) {
          io.socket.post('/close', function () {
            console.log('Database closed')
            window.location.href = '/connect'
          });
        }
      },
      created: function () {
        console.log('app created')
        var _this = this
        // Load existing chat messages
        io.socket.post('/stream/start', function () {
          console.log(arguments)
          console.log('connected to the stream')
        });

        // Listen for new chat messages
        io.socket.on('message', function (message) {
          console.log('new message arrived')
          message.localDate = new Date(message.timestamp).toLocaleString();
          _this.messages.unshift(message)
        });
      },
      beforeDestroy: function () {
        this.closeConnection();
      }
    });
  });
</script>

<div id="app" class="container-fluid">
  <h3 class='text-center'>Streams</h3><button class="btn btn-primary pull-right" v-on:click="closeConnection" id='close-connection'>Close</button>
  <hr />
  <table class="table">
    <thead>
      <th scope="col" class="col-md-1">Timestamp</th>
      <th scope="col" class="col-md-1">Id</th>
      <th scope="col" class="col-md-1">Database</th>
      <th scope="col" class="col-md-1">Collection</th>
      <th scope="col" class="col-md-1">Operation</th>
      <th scope="col" class="col-md-7">Document</th>
    </thead>
    <tbody>
      <tr is="change-message" v-for="(message, index) in messages" v-bind:message="message" v-bind:index="index"
        v-bind:key="message._id"></tr>
    </tbody>
  </table>
</div> <!-- /container -->